#!/usr/bin/env python
#
# requires root privs
import argparse
from math import pow
import os
from subprocess import check_call, CalledProcessError

BLOCK_SIZE = pow(2, 20) # 1 MiB
BLOCK_SIZE_STR = '1M'

BLOCK_COUNT = '500' # block size * count = image size

# image innards that facilitate installation
SKELETON = ['dev', 'etc', 'proc', 'sys', 'var/cache', 'var/log', 
            'var/lock', 'var/lib/rpm']

BIND_MOUNTS = ['dev', 'dev/pts', 'dev/shm', 'proc', 'sys']

DEVICES = ['console', 'null', 'zero', 'urandom']

def parse_cmdline():
    parser = argparse.ArgumentParser(
        description="Create a Linux root filesystem image")

    parser.add_argument('base_dir', metavar='BASE_DIR',
                        help="directory where image is created and mounted")
    parser.add_argument('image_name', metavar="IMAGE_NAME",
                        help='image name (extension not required)')
    parser.add_argument('--size', default=BLOCK_COUNT, 
                        help='size of the image in MiB [500]')

    return parser.parse_args()
    
def cleanup_mounts(mpath):
    """
    Unmount bound system mount points, if present.  Then unmount the image.
    
    The order is important if mounts are nested, so do them in reverse.
    
    mpath: top level mount point
    """
    for path in BIND_MOUNTS.reverse():
        mount_point = '{}/{}'.format(mpath, path)
        if os.path.ismount(mount_point):
            print 'unmounting {}'.format(mount_point)
            check_call(['umount', mount_point])
    check_call(['umount', mpath])

def remove(mpath, ipath):
    """Umount and delete a mounted file.

    mpath: mount point
    ipath: path to image
    """
    if os.path.ismount(mpath):
        print 'unmount {}'.format(mpath)
        check_call(['umount', mpath])

    if os.path.exists(ipath):
        print 'deleting {}'.format(ipath)
        os.remove(ipath)

def create_image(target_dir, image_name, blkcount):
    """
    Create an empty image file and mount it.
    
    target_dir: directory to place image and mount point
    blkcount: number of 1MB blocks
    """
    commands = []
    
    image = '{}/{}'.format(target_dir, image_name)
    mount_path = '{}/mnt'.format(target_dir)
    remove(mount_path, image)

    if_arg = 'if=/dev/zero'
    of_arg = 'of={}'.format(image)
    bs_arg = 'bs={}'.format(BLOCK_SIZE_STR)
    bc_arg = 'count={}'.format(blkcount)
    commands.append(['dd', if_arg, of_arg, bs_arg, bc_arg])
    
    commands.append(['mkfs.ext3', '-F', '-j', image])
    commands.append(['mount', '-o','loop', image, mount_path])
    
    try:
        for cmd in commands:
            print 'executing: {}'.format(cmd)
            check_call(cmd)
    except CalledProcessError, e:
        print 'error: {}'.format(e.strerror)
        remove(image)
        raise

def make_device_files(target, file_names):
    cmd = ['MAKEDEV', '-d', '{}/dev'.format(target), '-x', 'dummy']
    last_arg = len(cmd) - 1
    for dev in file_names:
        cmd[last_arg] = dev
        check_call(cmd)
    
def make_directories(target, dirs, fail_exists=False):
    """
    Make multiple directories, including intermediate parents.
    
    target: base directory
    dirs: a sequence of strings containing relative path names
    target_root: the directory to create in
    fail_exists: don't bail out if the directory is already there
    
    TODO: library candidate
    """
    try:
        for dir in dirs:
            os.makedirs('{}/{}'.format(target, dir))
    except OSError, e:
        if e.errno == 17 and fail_exists:
            raise

def bind_mount(target, sources):
    """
    Bind mount (overlay) a file or directory onto another.
    
    target: directory containing mount points to bind to
    sources: list of source paths to mount
    """
    cmd = ['mount', '-o', 'bind', 'source', 'target']
    for source in sources:
        cmd[3] = '/{}'.format(source)
        cmd[4] = '{}/{}'.format(target, source)
        check_call(cmd)
    
def prep_image(mount_dir):
    """
    Prepare for chroot operations by initializing directory structure and 
    device files.  Bind to running kernel filesystems.
    """
    try:            
        make_directories(mount_dir, SKELETON)
        make_device_files(mount_dir, DEVICES)
        bind_mount(mount_dir, BIND_MOUNTS)
    except CalledProcessError, e:
        cleanup_mounts(mount_dir)
        raise

args = parse_cmdline()
make_directories(args.base_dir, ['mnt'])
create_image(args.base_dir, args.image_name + '.img', args.size)
mount_dir = args.base_dir + '/mnt'
prep_image(mount_dir)
print "image is mounted on {}".format(mount_dir)
print "TODO: install packages"
    
    
